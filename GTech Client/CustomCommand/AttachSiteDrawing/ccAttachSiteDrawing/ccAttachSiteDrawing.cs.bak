//----------------------------------------------------------------------------+
//        Class: ccAttachSiteDrawing
//  Description: This command allows a user to generate a PDF from an open plot window and attach it to a selected Permit or Easement feature.
//----------------------------------------------------------------------------+
//     $Author:: kappana                                                       $
//       $Date:: 12/12/17                                                     $
//   $Revision:: 1                                                            $
//----------------------------------------------------------------------------+
//    $History:: ccAttachSiteDrawing.cs                                           $
// 
// *****************  Version 1  *****************
// User: kappana     Date: 12/12/17    Time: 18:00  Desc : Created
//----------------------------------------------------------------------------+

using System;
using Intergraph.GTechnology.API;
using Intergraph.GTechnology.Interfaces;
using System.Windows.Forms;
using System.IO;


namespace GTechnology.Oncor.CustomAPI
{
	class ccAttachSiteDrawing : IGTCustomCommandModal
	{
		#region Variables
		private IGTApplication m_igtApplication;
		protected IGTTransactionManager m_igtTransactionManage;
		private int m_selectedFID;
		private short m_selectedFNO;
		private String m_plotwindowPdfFilename;
		private String m_plotwindowPath = Path.GetTempPath();
		#endregion

		#region Properities
		public IGTTransactionManager TransactionManager
		{
			set { m_igtTransactionManage = value; }
		}
		#endregion

		#region IGTCustomCommandModal Methods
		public void Activate()
		{
			IGTPlotWindow igtPlotWindow = null;
			IGTExportService igtExportService=null;
			IGTPDFPrinterProperties igtPDFPrinterProperties = null;
			try
			{
				m_igtApplication = GTClassFactory.Create<IGTApplication>();
				igtPlotWindow = m_igtApplication.ActivePlotWindow;
				igtExportService = GTClassFactory.Create<IGTExportService>();
				igtPDFPrinterProperties = GTClassFactory.Create<IGTPDFPrinterProperties>();
				m_igtApplication.SetStatusBarText(GTStatusPanelConstants.gtaspcMessage, "Attach Site Drawing to selected feature started");

				if (Validate())
				{
					m_plotwindowPdfFilename = m_plotwindowPath + igtPlotWindow.Caption + ".pdf";
					m_igtApplication.BeginWaitCursor();
					igtExportService.SaveAsPDF(m_plotwindowPdfFilename, igtPDFPrinterProperties, igtPlotWindow, false);
					m_igtApplication.EndWaitCursor();
					if (File.Exists(m_plotwindowPdfFilename))
					{
						//add to hyperlink to selected object
						AddHyperLinktoSelectedFeature(m_selectedFNO, m_selectedFID, m_plotwindowPdfFilename, "Plotwindow " + m_igtApplication.ActivePlotWindow.Caption + " pdf","SITE");
					}
				}
				else
				{
					MessageBox.Show(m_igtApplication.ApplicationWindow,"Ad hoc plots may only be attached to a Permit or Easement feature.", "G/Technology", MessageBoxButtons.OK, MessageBoxIcon.Warning);
				}

			}
			catch (Exception ex)
			{
				m_igtApplication.EndWaitCursor();
				MessageBox.Show("Error during execution of Attach Site Drawing custom command" + ex.Message, "G/Technology", MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
		}

		#endregion

		#region Private Methods

		/// <summary>
		/// Validating Custom Command Conditions Selected feature is neither Permit nor Easement
		/// </summary>
		private bool Validate()
		{
			bool isValidation = false;
			IGTDDCKeyObject m_DDCSelectedKeyFeat = null;
			try
			{
				m_DDCSelectedKeyFeat = m_igtApplication.SelectedObjects.GetObjects()[0];
				if (m_DDCSelectedKeyFeat.FNO == 226 || m_DDCSelectedKeyFeat.FNO == 220)
				{
					isValidation = true;
					m_selectedFID = m_DDCSelectedKeyFeat.FID;
					m_selectedFNO = m_DDCSelectedKeyFeat.FNO;
				}
				return isValidation;
			}
			catch (Exception)
			{
				throw;
			}
			finally
			{
				if (m_DDCSelectedKeyFeat != null) m_DDCSelectedKeyFeat.Dispose(); m_DDCSelectedKeyFeat = null;
			}
		}


		/// <summary>
		/// Command to add hyperlink entry to feature
		/// </summary>
		/// <param name="p_selectedFNO"></param>
		/// <param name="p_selectedFID"></param>
		/// <param name="p_plotwindowPdfFilename"></param>
		/// <param name="p_description"></param>
		/// <param name="p_type"></param>
		private void AddHyperLinktoSelectedFeature(short p_selectedFNO, int p_selectedFID, string p_plotwindowPdfFilename, string p_description, string p_type)
		{
			IGTKeyObject ddcSelectedKeyObj;
			try
			{
				m_igtTransactionManage.Begin("IN PROGRESS");
				ddcSelectedKeyObj = m_igtApplication.DataContext.OpenFeature(p_selectedFNO, p_selectedFID);
				ddcSelectedKeyObj.Components["HYPERLINK_N"].Recordset.AddNew("G3E_FID", p_selectedFID);
				ddcSelectedKeyObj.Components["HYPERLINK_N"].Recordset.Fields["HYPERLINK_T"].Value = p_plotwindowPdfFilename;
				ddcSelectedKeyObj.Components["HYPERLINK_N"].Recordset.Fields["DESCRIPTION_T"].Value = p_description;
				ddcSelectedKeyObj.Components["HYPERLINK_N"].Recordset.Fields["TYPE_C"].Value = p_type;
				ddcSelectedKeyObj.Components["HYPERLINK_N"].Recordset.Update("G3E_FNO", p_selectedFNO);
				if (m_igtTransactionManage.TransactionInProgress) m_igtTransactionManage.Commit();
				m_igtApplication.SetStatusBarText(GTStatusPanelConstants.gtaspcMessage, "Site drawing has been attached to the selected " + p_selectedFID + " feature.");
			}
			catch (Exception)
			{
				if (m_igtTransactionManage.TransactionInProgress) m_igtTransactionManage.Rollback();
				throw;
			}
			finally
			{
				ddcSelectedKeyObj = null;
			}
		}

		#endregion
	}
}
