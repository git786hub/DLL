-- -----------------------------------------------------------------------------
-- Script Name: Update_PKG_GIS_STG_Maximo_Import_20180601.sql
-- Description: This script updates the GIS_STG.MAXIMO_IMPORT package.
-- Creator: R. Azzam Date:June 1,2018
-- -----------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE GIS_STG.MAXIMO_IMPORT AS
/******************************************************************************
   NAME:       MAXIMO_IMPORT
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/11/2018      reazzam       1. Created this package.
******************************************************************************/

  Procedure MaximoWOImport(RUN_ID in number);
  PROCEDURE DeleteClosedCanceledWO(RUN_ID in number);
  procedure ImportMaximoWOFeatures(RUN_ID in number);


END MAXIMO_IMPORT;
/

CREATE OR REPLACE PACKAGE BODY GIS_STG.MAXIMO_IMPORT
AS
   /******************************************************************************
      NAME:       MAXIMO_IMPORT
      PURPOSE:

      REVISIONS: Rev1
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        1/11/2018      reazzam       1. Created this package body.
      1.1        6/01/2018      reazzam       2. fixed message size logic
                                                 CreateEMailMessage
   ******************************************************************************/

-- ----------------------------------------------------------------------------
-- MaximoWOImport merges the gis_stg.STG_MAXIMO_WORKORDER data into the
--   gis.MAXIMOWO_N table data. Any error generated by this merge adds records
--   to the gis_stg.MAXIMOIMPORT_ERR_LOG table.
-- This prcedure is a visible outside of the package.
-- ----------------------------------------------------------------------------
   PROCEDURE MaximoWOImport (RUN_ID IN NUMBER)
   IS
      TmpVar   NUMBER;
      tmpWONum STG_MAXIMO_WORKORDER.WO_NUM%type;
      tmpRun_Id number;
      --tmpStatus varchar2(20);
      tmpStatus STG_MAXIMO_WORKORDER.STATUS%type;
      tmpCnt number(10);

      cvWONum SYS_REFCURSOR;
      cvStatus SYS_REFCURSOR;
   BEGIN

      tmpRun_Id := RUN_ID;

      Open cvWONum for
        select distinct A.WO_NUM from STG_MAXIMO_WORKORDER a
                       where  PROCESS_RUN_ID = tmpRun_Id
                       and STATUS not in ('CAN','COMP')
                       and (A.WORK_LOCATION is not null  -- filter out records with bad location
                       and A.WORK_LOCATION <> 'XY(0,0)') -- filter out records with bad location
                       order by A.WO_NUM ;
      Loop
        fetch cvWONum into tmpWONum;
        exit when cvWONum%NOTFOUND;
        -- DBMS_OUTPUT.PUT_LINE(' WO_NUM : ' || tmpWONum);
        open cvStatus for
            select b.STATUS from STG_MAXIMO_WORKORDER b
                where PROCESS_RUN_ID = tmpRun_Id
                       and B.WO_NUM = tmpWONum;
        tmpCnt := 0;

        loop

            fetch cvStatus into tmpStatus;

            exit when cvStatus%NOTFOUND or tmpCnt = 1;
            -- DBMS_OUTPUT.PUT_LINE(' WO_NUM : ' || tmpWONum ||
                        --            ' Status : ' || tmpStatus || ' count: ' || tmpCnt);
    --
            merge into gis.MAXIMOWO_N mn
               using ( select WO_NUM,STATUS,STATUS_DATE,WORK_TYPE,
                        REPORT_DATE,WORK_ORDER_ID,CG_CAPITAL,CG_EVENT_ID,
                        CG_ORIG_EVENT_ID,SUBSTATION_NM,FEEDER_NM,WORK_LOCATION,PROCESS_RUN_ID
                       from STG_MAXIMO_WORKORDER
                       where  PROCESS_RUN_ID = tmpRun_Id
                       and STATUS = tmpStatus and WO_NUM = tmpWONum  order by Status_date
                     ) S
               on (S.WO_NUM = MN.WO_NUM)
               when matched then update set MN.STATUS = S.STATUS,
                                            MN.WORK_TYPE = S.work_type, MN.STATUS_DATE = s.status_date,
                                            MN.REPORT_DATE = s.report_date,MN.WORK_ORDER_ID = s.work_order_id,
                                            MN.CG_CAPITAL = s.cg_capital, MN.CG_EVENT_ID = s.cg_event_id,
                                            MN.CG_ORIG_EVENT_ID = s.cg_orig_event_id,
                                            MN.SUBSTATION_NM = s.substation_nm, MN.FEEDER_NM = s.feeder_nm,
                                            MN.WORK_LOCATION = s.work_location, MN.PROCESS_RUN_ID = s.PROCESS_RUN_ID
               when not matched then insert (mn.WO_NUM,MN.STATUS,MN.WORK_TYPE,MN.STATUS_DATE,MN.REPORT_DATE,
                                             MN.WORK_ORDER_ID,MN.CG_CAPITAL,MN.CG_EVENT_ID,MN.CG_ORIG_EVENT_ID,
                                             MN.SUBSTATION_NM,MN.FEEDER_NM,MN.WORK_LOCATION,
                                             MN.g3e_id,MN.g3e_fid,MN.g3e_cno,MN.g3e_fno,MN.g3e_cid,MN.PROCESS_RUN_ID )
                                      Values(s.WO_NUM,s.STATUS,s.WORK_TYPE,s.STATUS_DATE,s.REPORT_DATE,
                                             s.WORK_ORDER_ID,s.CG_CAPITAL,s.CG_EVENT_ID,s.CG_ORIG_EVENT_ID,
                                             s.SUBSTATION_NM,s.FEEDER_NM,s.WORK_LOCATION,
                                             gis.MAXIMOWO_N_SEQ.nextval,gis.G3E_FID_SEQ.nextval,18701,187,1,s.PROCESS_RUN_ID )
               log errors into gis_stg.MAXIMOIMPORT_ERR_LOG REJECT LIMIT UNLIMITED;


               tmpCnt := 1;

        end loop;

        close cvStatus;

      end Loop;

      Close cvWONum;

      merge into gis.MAXIMOWO_N mn
           using ( select WO_NUM,STATUS,STATUS_DATE,WORK_TYPE,
                    REPORT_DATE,WORK_ORDER_ID,CG_CAPITAL,CG_EVENT_ID,
                    CG_ORIG_EVENT_ID,SUBSTATION_NM,FEEDER_NM,WORK_LOCATION,PROCESS_RUN_ID
                   from STG_MAXIMO_WORKORDER
                   where  PROCESS_RUN_ID = RUN_ID
                   and STATUS not in ('CAN','COMP') order by Status_date
                 ) S
           on (S.WO_NUM = MN.WO_NUM)
           when matched then update set MN.STATUS = S.STATUS,
                                        MN.WORK_TYPE = S.work_type, MN.STATUS_DATE = s.status_date,
                                        MN.REPORT_DATE = s.report_date,MN.WORK_ORDER_ID = s.work_order_id,
                                        MN.CG_CAPITAL = s.cg_capital, MN.CG_EVENT_ID = s.cg_event_id,
                                        MN.CG_ORIG_EVENT_ID = s.cg_orig_event_id,
                                        MN.SUBSTATION_NM = s.substation_nm, MN.FEEDER_NM = s.feeder_nm,
                                        MN.WORK_LOCATION = s.work_location, MN.PROCESS_RUN_ID = s.PROCESS_RUN_ID

           when not matched then insert (mn.WO_NUM,MN.STATUS,MN.WORK_TYPE,MN.STATUS_DATE,MN.REPORT_DATE,
                                         MN.WORK_ORDER_ID,MN.CG_CAPITAL,MN.CG_EVENT_ID,MN.CG_ORIG_EVENT_ID,
                                         MN.SUBSTATION_NM,MN.FEEDER_NM,MN.WORK_LOCATION,
                                         MN.g3e_id,MN.g3e_fid,MN.g3e_cno,MN.g3e_fno,MN.g3e_cid,MN.PROCESS_RUN_ID)
                                  Values(s.WO_NUM,s.STATUS,s.WORK_TYPE,s.STATUS_DATE,s.REPORT_DATE,
                                         s.WORK_ORDER_ID,s.CG_CAPITAL,s.CG_EVENT_ID,s.CG_ORIG_EVENT_ID,
                                         s.SUBSTATION_NM,s.FEEDER_NM,s.WORK_LOCATION,
                                         gis.MAXIMOWO_N_SEQ.nextval,gis.G3E_FID_SEQ.nextval,18701,187,1,s.PROCESS_RUN_ID)
           log errors into gis_stg.MAXIMOIMPORT_ERR_LOG REJECT LIMIT UNLIMITED;

        -- update the status in the staging table to processed.
               update GIS_STG.STG_MAXIMO_WORKORDER set PROCESS_STATUS = 'PROCESSED: Inserted / Updated', PROCESS_RUN_ID = RUN_ID
                   where PROCESS_RUN_ID = RUN_ID
                         and STATUS not in ('CAN','COMP');

   EXCEPTION
    WHEN OTHERS
      THEN

        RAISE;

   END;

-- ----------------------------------------------------------------------------
-- DeleteClosedCanceledWO procedure deletes records from the gis.MAXIMOWO_N
--  table where records with the same WORK_ORDER_ID that as rows in the
--  gis_stg.STG_MAXIMO_WORKORDER table with the current RUN_ID and a status of
--  CLOSE or CAN.
-- This procedure is a visible outside of the package.
-- ----------------------------------------------------------------------------

   PROCEDURE DeleteClosedCanceledWO (RUN_ID IN NUMBER)
   IS
      TmpVar   Varchar2(40);
   BEGIN

        delete from GIS.MAXIMOWO_N gmn
          where GMN.WORK_ORDER_ID in
            (select SMS.WORK_ORDER_ID from GIS_STG.STG_MAXIMO_WORKORDER sms
                    where SMS.STATUS in ('CLOSE','CAN') and
                          SMS.PROCESS_RUN_ID = RUN_ID);

       -- update the status in the staging table to Processed - Deleted
        update GIS_STG.STG_MAXIMO_WORKORDER
            set PROCESS_STATUS = 'PROCESSED - Deleted', PROCESS_RUN_ID = RUN_ID
                where STATUS in ('CLOSE','CAN')
                  and PROCESS_RUN_ID = RUN_ID
                  and PROCESS_STATUS <> 'PROCESSED: Deleted';

   EXCEPTION

   WHEN OTHERS
   THEN

      RAISE;
   END;


-- ----------------------------------------------------------------------------
-- CreateEMailMessage function querys the gis_stg.MAXIMOIMPORT_ERR_LOG table
--   for any records added by MaximoWOImport procedure with the current RUN_ID.
--   With results of the query the email message body is create and returned
-- This function is only visible inside of the package
-- ----------------------------------------------------------------------------
   function CreateEMailMessage(RUN_ID number) return varchar2
   is
   tmpMsg varchar2(32000);
   cursor ErrCur is
         select PROCESS_RUN_ID ||chr(9) || mel.WO_NUM || chr(9) ||chr(9) ||STATUS|| chr(9) || chr(9) || nvl( OTHER_MSG,chr(9))
             || chr(9) ||chr(9) ||chr(9) || MEL.ORA_ERR_NUMBER$ || ' - ' || nvl(trim(chr(10) from ORA_ERR_MESG$),chr(9))
               "REC_ERR"
          from gis_stg.MAXIMOIMPORT_ERR_LOG mel
          where PROCESS_RUN_ID = RUN_ID;
   begin

        tmpMsg := 'These Maximo Work Orders features did not import properly into G/Technolgy.'|| chr(10)|| chr(10);
        tmpMsg := tmpMsg || 'Run Id'||  chr(9)  ||'MaximoWo'|| chr(9) || 'Status'|| chr(9) || chr(9) ||
                         'Other Message'|| chr(9) ||chr(9) || chr(9) || chr(9) ||chr(9) ||'Oracle Error'
        ||  chr(10);
        for errRec in ErrCur
        loop
          tmpMsg := tmpMsg || errRec.REC_ERR || chr(10);
          if LENGTH(tmpMSG) > 30000 then
            tmpMsg := tmpMsg || 'Too many errors to be listed in this email.' || chr(10)
                             || 'Please look in the MAXIMOIMPORT_ERR_LOG table for all the errors.' || chr(10)
                             ||'...' || chr(10);
            exit;
          end if;
        end loop;
        -- DBMS_OUTPUT.PUT_LINE(tmpMsg);
   return tmpMsg;

   EXCEPTION
   WHEN OTHERS
   THEN
      tmpMsg := tmpMsg || 'Error creating Email Message:' || sqlerrm;
      return tmpMSG;
      RAISE;
   end;

-- -----------------------------------------------------------------------------
--
-- This function creates an html table that contains the error data.
--   EdgeFrontier will not add it correctly to the email.
--   EdgeFrontier only sends text data as the message body.
--    This function is not called.
--
-- ----------------------------------------------------------------------------
--function CreateEMailMessage2(RUN_ID number) return varchar2
--   is
--   tmpHTML varchar2(32000);
--
--   begin
----    tmpHTML := tmpHTML || htf.htmlOpen ;
----    tmpHTML := tmpHTML || htf.headOpen ;
----    tmpHTML := tmpHTML || htf.style('table,th,td {border: 1px solid black; border-collapse: collapse;} td {word-wrap: break-word;}');
----    tmpHTML := tmpHTML || HTF.HEADCLOSE;
----    tmpHTML := tmpHTML || HTF.BODYOPEN;
--    tmpHTML := tmpHTML || HTF.TABLEOPEN();
--    tmpHTML := tmpHTML || HTF.TABLECAPTION('Import Maximo Work Order Errors','CENTER');
--    tmpHTML := tmpHTML ||      HTF.TABLEROWOPEN('CENTER');
--    tmpHTML := tmpHTML ||      htf.tableData('Maximo Work Order');
--    tmpHTML := tmpHTML ||      htf.tableData('Oracle Error Msg');
--    tmpHTML := tmpHTML ||      htf.tableData('Other Msg');
--    tmpHTML := tmpHTML ||      htf.tableData('Run Process Id');
--    tmpHTML := tmpHTML ||      HTF.TABLEROWCLOSE;
--     for idx in (select WO_NUM,STATUS,trim(chr(10) from ORA_ERR_MESG$) "ORA_ERR_MSG",OTHER_MSG,
--                  PROCESS_RUN_ID
--              from gis_stg.MAXIMOIMPORT_ERR_LOG mel
--              where PROCESS_RUN_ID = RUN_ID)
--       loop
--            tmpHTML := tmpHTML ||      HTF.TABLEROWOPEN();
--            tmpHTML := tmpHTML ||          htf.tableData(idx.WO_NUM);
--            tmpHTML := tmpHTML ||          htf.tableData(idx.ORA_ERR_MSG);
--            tmpHTML := tmpHTML ||          htf.tableData(idx.OTHER_MSG);
--            tmpHTML := tmpHTML ||          htf.tableData(idx.PROCESS_RUN_ID);
--            tmpHTML := tmpHTML ||      HTF.TABLEROWCLOSE;
--       end loop;
--
--    tmpHTML := tmpHTML || htf.tableClose;
----    tmpHTML := tmpHTML || htf.bodyClose;
----    tmpHTML := tmpHTML || htf.htmlclose;
--    DBMS_OUTPUT.PUT_LINE('html email message');
--    DBMS_OUTPUT.PUT_LINE(tmpHTML);
--    return tmpHTML;
--
--    EXCEPTION
--       WHEN OTHERS
--       THEN
--       tmpHTML := tmpHTML || 'Error creating Email Message:' || sqlerrm;
--       return tmpHTML;
--       RAISE;
--   end;


   -- -------------------------------------------------------------------------
   -- SendErrorEmail queries the GIS.SYS_GENERALPARAMETER table for the email
   --   to email address, the from email address, and the email Subject.
   --   Calls the CreateEMailMessage function to create the email message.
   --   Sets properties for the GIS.SEND_EF_EMAIL_PKG.
   --   Calls the GIS.SEND_EF_EMAIL_PKG.SENDEMAIL() procedure to send the
   --   the email.
   -- This procedure is only visible inside of the package
   -- -------------------------------------------------------------------------
   procedure SendErrorEmail(RUN_ID number) is
        toAddr varchar2(100);
        fromAddr varchar2(100);
        subject varchar2(100);
        emMessage varchar2(32000);
        errCnt number;
   begin
    errCnt := 0;
    -- DBMS_OUTPUT.PUT_LINE('SendErrorEmail started.');
--    SELECT PARAM_VALUE INTO toAddr
--        FROM GIS.SYS_GENERALPARAMETER
--        WHERE subsystem_name = 'MaximoWO'
--          and Subsystem_component = 'ErrorLoggingMail'
--          and Param_name  = 'NotificationEmailAddr';
    SELECT ADDRESS_LIST INTO toAddr
        from gis_onc.SENDEMAIL_GROUP
        where GROUP_ALIAS = 'MAXIMO_IMPORT_GROUP';
    -- DBMS_OUTPUT.PUT_LINE('ToAddr Param');
    SELECT PARAM_VALUE INTO fromAddr
        FROM GIS_ONC.SYS_GENERALPARAMETER
        WHERE subsystem_name = 'MaximoWO'
          and Subsystem_component = 'ErrorLoggingMail'
          and Param_name  = 'FromEmailAddr';
    -- DBMS_OUTPUT.PUT_LINE('FromAddr Param');
    SELECT PARAM_VALUE INTO subject
        FROM GIS_ONC.SYS_GENERALPARAMETER
        WHERE subsystem_name = 'MaximoWO'
          and Subsystem_component = 'ErrorLoggingMail'
          and Param_name  = 'Subject';
    -- DBMS_OUTPUT.PUT_LINE('Subject Param');
     EmMessage := CreateEMailMessage(run_id);
     -- -- DBMS_OUTPUT.PUT_LINE('CreateEmailMSG Param');
     GIS.SEND_EF_EMAIL_PKG.EMTOADDRESS := toAddr;
     GIS.SEND_EF_EMAIL_PKG.EMFROMADDRESS := fromAddr;
     GIS.SEND_EF_EMAIL_PKG.EMSUBJECT := subject;
     GIS.SEND_EF_EMAIL_PKG.EMMESSAGE := EmMessage;
   -- GIS.SEND_EF_EMAIL_PKG.emEncode := false; -- Just testing to see if HTML Table can be sent
     GIS.SEND_EF_EMAIL_PKG.SENDEMAIL();
     -- DBMS_OUTPUT.PUT_LINE('Email Sent.');

    EXCEPTION
   When NO_DATA_FOUND
   then

      DBMS_OUTPUT.PUT_LINE('SendErrorEmail no data found');
     --resume;

   WHEN OTHERS
   THEN

      RAISE;

   END;

   procedure ProcessRecsWithoutValidLoc(RUN_ID in NUMBER) is

        tmpRow STG_MAXIMO_WORKORDER%rowtype;
        cvWONoLoc SYS_REFCURSOR;
        tmpErr varchar2(32000);

   begin
    --DBMS_OUTPUT.PUT_LINE('ProcessRecsWithoutValidLoc - Started');
    open cvWONoLoc for
            select * from STG_MAXIMO_WORKORDER b
                where PROCESS_RUN_ID = RUN_ID
                       and (B.WORK_LOCATION = 'XY(0,0)' or B.WORK_LOCATION is null);
    Loop
        fetch cvWONoLoc into tmpRow;
        exit when cvWONoLoc%NOTFOUND;
       -- DBMS_OUTPUT.PUT_LINE('ProcessRecsWithoutValidLoc - Fetching rows');
        -- Added err log entry for each record found.
        insert into MAXIMOIMPORT_ERR_LOG a
          (WO_NUM,STATUS,STATUS_DATE,WORK_TYPE,REPORT_DATE,WORK_ORDER_ID,CG_CAPITAL,
           CG_EVENT_ID,CG_ORIG_EVENT_ID,SUBSTATION_NM,FEEDER_NM,WORK_LOCATION,
           AUD_CREATE_TS,AUD_CREATE_USER,PROCESS_RUN_ID,OTHER_MSG,INSERT_DT)
           values
           (tmpRow.WO_NUM,tmpRow.STATUS,tmpRow.STATUS_DATE,tmpRow.WORK_TYPE,
            tmpRow.REPORT_DATE,tmpRow.WORK_ORDER_ID,tmpRow.CG_CAPITAL,
            tmpRow.CG_EVENT_ID,tmpRow.CG_ORIG_EVENT_ID,tmpRow.SUBSTATION_NM,
            tmpRow.FEEDER_NM,tmpRow.WORK_LOCATION,
            sysdate,user,
            RUN_ID,'Location set to XY(0,0) or NULL.',sysdate);
    end loop;

    -- set process_status in staging table.
    update STG_MAXIMO_WORKORDER
        set PROCESS_STATUS = 'ERROR - Bad Location data'
        where (WORK_LOCATION = 'XY(0,0)' or work_location is null)
        and PROCESS_RUN_ID = RUN_ID;

   EXCEPTION
   WHEN OTHERS
   THEN
        tmpErr := sqlerrm;
        Insert into gis_stg.MAXIMOIMPORT_ERR_LOG (PROCESS_RUN_ID,OTHER_MSG,INSERT_DT)
            values (RUN_ID,
                   'Error running  ProcessRecsWithoutValidLoc:'||tmpErr,
                    sysdate);

      rollback;
      RAISE;
   END;

-- ----------------------------------------------------------------------------
-- ImportMaximoWOFeatures
--   Calls the DeleteClosedCanceledWO procedure.
--   Calls the MaximoWOImport procedure.
--   Then calls the DeleteClosedCanceledWO procedure in case the merge function
--      added any rows that should have been are work orders that should have
--      been deleted.
--   If no errors occur, all the transactions are commited.
--   If an error is raised by any of these procedures, the error will be logged
--     in the gis_stg.MAXIMOIMPORT_ERR_LOG and raised to the calling process.
--     All of the transactions will then be rolled back.
-- This procedure is a visible outside of the package.
-- ----------------------------------------------------------------------------
  PROCEDURE ImportMaximoWOFeatures (RUN_ID IN NUMBER)
   IS
    currentRunId   NUMBER;
    errCnt   number;
    tmpErr varchar2(500);
    vGisConfiguration varchar2(30);
   BEGIN
      errCnt :=0;
      currentRunId := RUN_ID;
      select param_value into vGisConfiguration from sys_generalparameter
                where SUBSYSTEM_NAME ='MaximoWO'
                  and SUBSYSTEM_COMPONENT = 'LttUserConfig'
                  and PARAM_NAME = 'LttUserConfig';

      GIS.LTT_USER.SETCONFIGURATION(vGisConfiguration);

      DeleteClosedCanceledWO (currentRunId);
      ---- DBMS_OUTPUT.PUT_LINE('Delete 1');
      ProcessRecsWithoutValidLoc(currentRunID);-- Place holder for handling Location = XY(0,0) records.
      MaximoWOImport (currentRunId);
      ---- DBMS_OUTPUT.PUT_LINE('MaxWOImport 1');
      DeleteClosedCanceledWO (currentRunId); -- if import added the WO back
      ---- DBMS_OUTPUT.PUT_LINE('Delete 2');
      -- check for in error log
      -- send email if necessary
      --   Error# 30926 indicates that there was more than one entry in the
      --     staging table with the same run_id and Maximo Workorder number.
      select count(*) into errCnt from gis_stg.MAXIMOIMPORT_ERR_LOG
           where PROCESS_RUN_ID = currentRunID
             and (ORA_ERR_NUMBER$ <> 30926
             or ORA_ERR_NUMBER$ is null);

      --DBMS_OUTPUT.PUT_LINE('ErrCnt : '|| errCnt || ' Run_Id : ' || currentRunID );
      if errCnt > 0 then
        --DBMS_OUTPUT.PUT_LINE ('SendErrorEmail 1');
        SendErrorEmail(currentRunId);
        -- DBMS_OUTPUT.PUT_LINE ('SendErrorEmail 2');
      end if;

      commit;
   EXCEPTION
   WHEN OTHERS
   THEN
        tmpErr := sqlerrm;
        Insert into gis_stg.MAXIMOIMPORT_ERR_LOG (PROCESS_RUN_ID,OTHER_MSG,INSERT_DT)
            values (currentRunId,
                   'Error running ImportMaximoWOFeatures:'||tmpErr,
                    sysdate);

      rollback;
      RAISE;
   END;


END MAXIMO_IMPORT;
/