create or replace 
PACKAGE BODY ETL_CONTROL_PKG
IS
FUNCTION INSERT_BALANCE_REC(
    I_COMPONENT_NM VARCHAR2,
    I_PROCESS_RUN_ID NUMBER ,
    I_PROCESS_ID NUMBER ,
    I_SRC_SYS_NM  VARCHAR2,
    I_TGT_SYS_NM VARCHAR2,
    I_SRC_OBJ_NM VARCHAR2,
    I_TGT_OBJ_NM VARCHAR2,
    I_SRC_COUNT NUMBER,
    I_TGT_COUNT NUMBER
    )
	RETURN VARCHAR2 IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  O_STATUS VARCHAR2(15);
  V_CODE NUMBER;
  V_ERRM VARCHAR2(100);
  BEGIN
  
  INSERT INTO ETL_BALANCE_CONTROL (BALANCE_ID, COMPONENT_NM, PROCESS_RUN_ID, PROCESS_ID, SRC_SYS_NM, TGT_SYS_NM, SRC_OBJ_NM, TGT_OBJ_NM, SRC_COUNT, TGT_COUNT)
  VALUES (AUD_ETL_CONTROL_SEQ.NEXTVAL, I_COMPONENT_NM, I_PROCESS_RUN_ID, I_PROCESS_ID, I_SRC_SYS_NM, I_TGT_SYS_NM, I_SRC_OBJ_NM, I_TGT_OBJ_NM, I_SRC_COUNT, I_TGT_COUNT);
  
  COMMIT;
  O_STATUS := 'SUCCESS';
  
  RETURN O_STATUS;
	
		EXCEPTION
		
		WHEN VALUE_ERROR THEN
			V_CODE := SQLCODE;
			V_ERRM := SUBSTR(SQLERRM ,1 ,100);
      O_STATUS := 'FAIL ERROR';
			DBMS_OUTPUT.PUT_LINE ('' || SYSTIMESTAMP || ' Error code ' || V_CODE || ': ' || V_ERRM);
      RETURN V_ERRM;
		
		WHEN OTHERS THEN
			V_CODE := SQLCODE;
			V_ERRM := SUBSTR(SQLERRM ,1 ,100);
			O_STATUS := 'FAIL OTHERS';
      DBMS_OUTPUT.PUT_LINE ('' || SYSTIMESTAMP || ' Error code ' || V_CODE || ': ' || V_ERRM);
      RETURN V_ERRM;
      
END INSERT_BALANCE_REC;      

FUNCTION UPDATE_BALANCE_REC(
    I_COMPONENT_NM VARCHAR2,
    I_BALANCE_ID NUMBER,
    I_TGT_COUNT NUMBER
    )
  RETURN VARCHAR2 IS
  PRAGMA AUTONOMOUS_TRANSACTION;
  O_STATUS VARCHAR2(15);
  V_CODE NUMBER;
  V_ERRM VARCHAR2(100);
  BEGIN
  
  UPDATE ETL_BALANCE_CONTROL
  SET TGT_COUNT = I_TGT_COUNT
  WHERE BALANCE_ID = I_BALANCE_ID;
  COMMIT;
  
  RETURN O_STATUS;
	
  EXCEPTION
		
		WHEN VALUE_ERROR THEN
			V_CODE := SQLCODE;
			V_ERRM := SUBSTR(SQLERRM ,1 ,100);
      O_STATUS := 'FAIL ERROR';
			DBMS_OUTPUT.PUT_LINE ('' || SYSTIMESTAMP || ' Error code ' || V_CODE || ': ' || V_ERRM);
      RETURN V_ERRM;
		
		WHEN OTHERS THEN
			V_CODE := SQLCODE;
			V_ERRM := SUBSTR(SQLERRM ,1 ,100);
			O_STATUS := 'FAIL OTHERS';
      DBMS_OUTPUT.PUT_LINE ('' || SYSTIMESTAMP || ' Error code ' || V_CODE || ': ' || V_ERRM);
      RETURN V_ERRM;
  
  END UPDATE_BALANCE_REC;
   
FUNCTION GET_AUD_ETL_CONTROL_SEQ_ID(I_VALUE_TYPE varchar2)
RETURN NUMBER
IS
O_SEQ_ID number :=0;

  BEGIN

  EXECUTE IMMEDIATE 'SELECT AUD_ETL_CONTROL_SEQ.'||I_VALUE_TYPE||' FROM DUAL' INTO O_SEQ_ID;

  RETURN O_SEQ_ID;

  END GET_AUD_ETL_CONTROL_SEQ_ID;
  
FUNCTION GIS_PURGE 
(
    I_SCHEMA_NM VARCHAR2,
    I_TABLE_NM VARCHAR2,
    I_FREQUENCY VARCHAR2,
    I_RETENTION NUMBER,
    I_CALENDAR_TYPE_CD VARCHAR2,
    I_PURGE_DT DATE
)
RETURN VARCHAR2 IS
    PRAGMA AUTONOMOUS_TRANSACTION;
    O_STATUS VARCHAR2(10);
    V_CODE NUMBER;
    V_ERRM VARCHAR2(1000);
    V_PURGE_DT VARCHAR2(10);
    V_RETENTION NUMBER;
    V_SQL VARCHAR2(4000);
BEGIN

--This query will return the integer value "V_RETENTION" to subtract from the current date
SELECT 
CASE 
  WHEN I_CALENDAR_TYPE_CD = 'B' THEN (SELECT MAX(RNUM)
                                    FROM 
                                    (
                                    SELECT ROWNUM RNUM
                                    FROM ALL_OBJECTS
                                    )
                                    WHERE ROWNUM <= I_RETENTION
                                    AND TO_CHAR(TRUNC(I_PURGE_DT) - RNUM, 'DY' ) NOT IN ('SAT', 'SUN')
                                    )
  ELSE I_RETENTION
END AS SUBTRACT_DAYS
INTO V_RETENTION
FROM DUAL
;

--Save the I_PURGE_DT input into V_PURGE_DT as a VARCHAR and truncate the time.
SELECT TO_CHAR(TRUNC(I_PURGE_DT),'MM/DD/YYYY') AS IN_PURGE_DT 
INTO V_PURGE_DT
FROM DUAL;

--Write Code that executes immediate deletes to tables being passed through the procedure
V_SQL := 'DELETE FROM '||I_SCHEMA_NM||'.'||I_TABLE_NM||' WHERE TRUNC(PROCESS_DT) <= TO_DATE('''||V_PURGE_DT||''',''MM/DD/YYYY'') - '||TO_CHAR(V_RETENTION);

DBMS_OUTPUT.PUT_LINE(V_SQL);

EXECUTE IMMEDIATE V_SQL;

--Write Code that saves data into existing GIS_PURGE table
UPDATE GIS_PURGE 
SET LAST_PURGED_DT = TRUNC(I_PURGE_DT)
WHERE ACTIVE_FLAG = 'Y' AND
SCHEMA_NM = I_SCHEMA_NM AND
TABLE_NM = I_TABLE_NM
;

COMMIT;

O_STATUS := 'SUCCESS'
;

RETURN O_STATUS;

EXCEPTION
		
		WHEN VALUE_ERROR THEN
			V_CODE := SQLCODE;
			V_ERRM := SUBSTR(SQLERRM ,1 ,100);
      O_STATUS := 'FAIL ERROR';
			DBMS_OUTPUT.PUT_LINE ('' || SYSTIMESTAMP || ' Error code ' || V_CODE || ': ' || V_ERRM);
      RETURN V_ERRM;
		
		WHEN OTHERS THEN
			V_CODE := SQLCODE;
			V_ERRM := SUBSTR(SQLERRM ,1 ,100);
			O_STATUS := 'FAIL OTHERS';
      DBMS_OUTPUT.PUT_LINE ('' || SYSTIMESTAMP || ' Error code ' || V_CODE || ': ' || V_ERRM);
      RETURN V_ERRM;

END GIS_PURGE;

     
END ETL_CONTROL_PKG    
    ;
/